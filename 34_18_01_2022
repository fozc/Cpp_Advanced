/*

Biraz Gruptan sorulan sorulardan bahsedildi.

DESIGN PATTERNS DEVAM

Single Responsibility Principle
-------------------------------
Genelde yanlış anlaşılıyor.Bunun sebebi isminin uygun olmaması.İyi seçilmemiş.
İlkenin ismini duyan programcılar her modülün tek birşey yapması gerektiği anlamını çıkarıyorlar.
Böyle bir ilke var ama o ilke bu ilke değil.O ilke functionlara yönelik. Bir function
tek bir şey yapmalı. C de hoca anlatmıştı.

Burada ne kastediliyor
Tarihsel olarak SRP şöyle tanımlanıyor, bir modül sadece ve sadece tek bir nedenden ötürü değişmeli.
Yazılımsal sistemler kulanıcıları tatmin etmek için değişirler.

Aynı ilkeyi şu şekilde de ifade edebiliriz.
Birr modül bir kullanıcıya karşı sorumluluk taşımalıdır.Burada Kullanıcı/stakeholder doğru kelimeler değil.
Sistemde bir değişikli gerektiğinde onu birden fazla kullanıcı/stakeholder talep ediyor olabilir. Burada kastedilen
değişikliği talep eden bir veya birden fazla kullanıcıdan/stakeholder oluşan grup. Bunlara da aktör diyor Robert C Martin.
Aktör illaha kullanıcı olmak zorunda değil. Başka bir program veya sistem olabilir.

SRP şu şelkilde ifade edilir. Bir modül sadece tek bir aktörün talebine göre değişebilir.
Birden fazla aktörün değil.

Burada modül derken neler kastediliyor.En kısa tanımla kaynak dosyadır modül (C++/Java içi)
Burada modul functionların ve veri yapılarının oluşturduğu cohesive kümedir.


Open Close Princible
--------------------
Modüller  ???????????????????? Yaz

Bir değişiklik implemente etmek için varolan kodu değiştirmek yerine yeni kod yazmak.
Varolanı değiştirme kod ekle.

Sınıf bazında düşününce sınıflar extensiona  bir türlü yazamadım.?????????????????

Bunu nasıl kullanabiliriz?
Değişikliğin nerelerden geleceğini öngörebilmeliyiz

Liskov of Substitution
----------------------
Polimorfizmin güvenli kullanımına ilişkin bu. 
Subsclases for be substitutable for their ....
Taban sınıf nesnesinin kullanıldığı yerde onun yerine türemiş sınıf nesneside kullanılabilir.

Substitution derken birtakım garantiler olması anlamında kullanılıyor.

Interface Seggregation Principle
--------------------------------
Client kodlar kullanmadıkları arayüzlere bağımlı olmaya zorlanmamalıdır.
KUllanılmayan kodları uygulamaya zorlamamamız gerekiyor.

Özel ince ayarı yapılmış interfaceler kullanılmalı. Onları kullanmayacakları interfacelere implemente
etmeye zorlamayın.

Oluşturduğumuz arayüxün genel olduğunu düşünüyorsak clientlar bunları kullanmaz diyorsak
bunları bölmek daha mnantıklı. Herbiri ayrı metod gruplarını içerse daha iyi olur.
Daha cohesive interfaceler kullanın diyor bu ilke.






































































*/
